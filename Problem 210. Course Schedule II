class Solution {
    
    List<Integer> status = new ArrayList<Integer>();
    List<Integer> order = new ArrayList<Integer>();
    
    Map<Integer,List<Integer>> matrix = new HashMap<>();
    
    int h=0;
    boolean pos = true;
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] crctOrder = new int[numCourses];
         for(int i=0;i<numCourses;i++){
            status.add(-1);
            order.add(0);
            List<Integer> val = new ArrayList<>();
            matrix.put(i,val);
        }
        h=numCourses-1;
        List<Integer> val = new ArrayList<>();
        for(int i=0;i<prerequisites.length;i++){
                val= matrix.get(prerequisites[i][1]);
                val.add(prerequisites[i][0]);
                matrix.put(prerequisites[i][1],val);       
        }
        for(int i=0;i<numCourses;i++){
            if(status.get(i)==-1){
               crctOrder = dodfs(i,crctOrder);
               if(pos==false){int[] res = new int[0];return res;}
            }  
            
        }
        //System.out.println(crctOrder);
        return crctOrder;
    }
    
    public int[] dodfs(int v,int[] crctOrder){
        if(pos==false){int[] res = new int[0];return res;}
        status.set(v,0);
        for(int j=0;j<matrix.get(v).size();j++){
            if(status.get(matrix.get(v).get(j))==-1){
               crctOrder = dodfs(matrix.get(v).get(j),crctOrder);
            }
            else if(status.get(matrix.get(v).get(j))==0)                                               {pos=false; int[] res = new int[0];return res;}
        }
        if(pos==false){int[] res = new int[0];return res;}
        status.set(v,1);
        crctOrder[h--] = v;
        return crctOrder;
    }
    
}
